{
  "transpiled": true,
  "noir_version": "1.0.0-beta.7+0000000000000000000000000000000000000000",
  "name": "CardEscrow",
  "functions": [
    {
      "name": "_cancel_timelock",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "spend_limit",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "withdraw",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15628205171772637163": {
            "error_kind": "string",
            "string": "Function _cancel_timelock can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQBHQCARYBFAS4IgEQAAS4IgEUAAiUAAABZJQAAAFooAgABBIBGJwICBAA7DgACAAEmJQAAAUkeAgADAB4CAAQAMyoAAwAEAAUnAgMBASQCAAUAAACDJQAAAXIeAgADAR4CAAQACioDBAUkAgAFAAAAnyUAAAGEJwIDAAIvCgADAAQnAgUAAy8KAAUABhwKBAgEHAoIBwAcCgcEBBwKBggEHAoIBwAcCgcGBC0IAQcAAAECAS0OBActCAEEAAABAgEtDgYEJwIIBAAkAgABAAAA/yMAAAEMLQ4IBy0OBgQjAAABDCQCAAIAAAEZIwAAASotCwcBLQ4BBy0OCAQjAAABKi0LBwEtCwQCHAoBBAAcCgIBADAKAAQAAzAKAAEABSYoAIAEBHgADQAAAIAEgAMkAIADAAABcSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEF2OKJzUxuP+s8BAIBJg==",
      "debug_symbols": "tVbRbuMgEPwXP+cBWBaW/EpVVW7qVpYsJ3KTk05V/v12G8DxSYuqi+4lHnAYmN3xsl/d2/B6+XgZ5/fjZ7d/+upel3Gaxo+X6Xjoz+Nx5tmvzshPwm7vd501PIry5LE1DCwwsAIoAxcyAMtAFoHMyCovMyQgZIC+gNTtHTAIPoNoCsAMiJe7ICBkkMpMyjPO2ALKjJVNkwDMwJkCfAGUAUAGKJtGASmD791JABaQMkh0A2BcAbw78JlBdr8BmeHzgHMCrtddV8L8cl6GQaJ8F3fOxqlfhvnc7efLNO26X/10+f7T56mfv5/nfuG3nIRhfuMnE76P0yDoultXG32pBQw+L+ckpVQprHMbEtsgMc4VDuPdSmHThsLpFJ5SzBQ+mVApCDcMoDOQhxIH8l5laMpIqciQo2sy8GEZ4f/KQKrZID0b1KDAiIUigNUOkXSGhKYcIiHaB2WIFzUZLXM7sNWY/F0b3dwNa6KJJSMMSZXS9Ga1BaF1GkVbilSOIgWDLuVxe9rH/fnzrCCpUpokd3XLIa0HwW3tsw2TWuurzfmuqRR8g2zrVuMgkaqYSABaPFzD6THIXXmjCGhUCtdWstYun1SLtaWYVYpXje58y2CmRNQTrBQAf0UUW6k1pmbWromF6H/ujrCGw4VgNHc0OSJUdzAO/8aB61cbY9I4XMul3hR7WO+i6lJoHISgchD3I+r12qrHQCHWToF4pZZcaBpV6mSp6npym2Jc/fTJkd4rNHxKpmohbltVipZNLYb1ggombUieedQfxmXTR1+FbRn712nIw/fLfLh7e/59Km9KH35ajofh7bIMwrQ245Z/nwLsAj1L4y2DtIv2+Spb/wE=",
      "brillig_names": [
        "_cancel_timelock"
      ]
    },
    {
      "name": "_elapse_timelock",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "spend_limit",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "withdraw",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6534693569755166711": {
            "error_kind": "string",
            "string": "Spend limit timelock not elapsed!"
          },
          "10970400482459992886": {
            "error_kind": "string",
            "string": "Withdraw timelock not elapsed!"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14268128030637468420": {
            "error_kind": "string",
            "string": "Function _elapse_timelock can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQBHQCARYBFAS4IgEQAAS4IgEUAAiUAAABZJQAAAGEoAgABBIBGJwICBAA7DgACAAEoAIBDBAAeJiUAAAGeHgIAAwAeAgAEADMqAAMABAAFJwIDAQEkAgAFAAAAiiUAAAHHHgIAAwEeAgAEAAoqAwQFJAIABQAAAKYlAAAB2ScCAwACLwoAAwAEJwIFAAMvCgAFAAYcCgQIBBwKCAcAHAoHBAQcCgYJBBwKCQgAHAoIBgQtCAEIAAABAgEtDgYIHgIABgUnAgkBACcCCgQAJAIAAQAAAQMjAAABPQEiAASAQwABDioEAQskAgALAAABHSUAAAHrDCoGAQQKKgQJASQCAAEAAAE0JQAAAf0tDgoIIwAAAT0kAgACAAABSiMAAAGILQsIAQEiAAGAQwACDioBAgQkAgAEAAABaCUAAAHrDCoGAgEKKgEJAiQCAAIAAAF/JQAAAg8tDgoIIwAAAYgtCwgBHAoBAgAwCgAHAAMwCgACAAUmKACABAR4AA0AAACABIADJACAAwAAAcYqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYqAQABBcYCktkb8KsEPAQCASYqAQABBUWnynEZQeQVPAQCASYqAQABBVqv5S3tSTf3PAQCASYqAQABBZg+sR14zUM2PAQCASY=",
      "debug_symbols": "tVfbbhshEP2XffYDcwEG/0oVRY6zqSytbGtjV6oi/3uHlFnsSKDUVl+8Z1lz4MwcBvgYXseX88/n3f7t8D6sf3wML/NumnY/n6fDdnPaHfba+jG4/AMOhzWv9BmHddQn6Ds4BajfATLwBRAZEAW5E+eW3ItziyjwVEAAA2FYIymIYCAWIGhAu2NQkMhAaUFHBqwFrAXyoEkBooFYAOWxMvBpWJPKwRALiFiAOAMqkFQXJmegtFAe/S/QsQgVkDPACnTyxGggFuB9ASH/mTPwBURriVKA5CG8goQGNGKsE2OnKpgyiBlcLqvBMvh8mscxJ/AqpZro42Ye96dhvT9P02r4tZnOn396P272n8/TZtavyj3uX/WphG+7aczosqq9XbsrkA9cugOFlBYKQLwhgQ6JQzQOx1gpIN1QYJuCJcVCwcmFhUL8DQO1GYTJ4iDMTYaujJRMRp56S4Z/WEb4vzK8LNmQdjakQ+GjN4pA0JpEajMk72wSyXt4UEb2YktGz9xaNxZjoi71trk71vQuWkYUSlNK15uLLcQDtij6UihUKT60pTxuT3jcn9/PipemlB4JSK7jxR7iaSHxt7UPUo+EF5tDrO5AB7d1qzORKIuYKESteGDH6TGASYnBuyYF9pXU2sWpabG+FFelcNPoyD2DOYsoC1UKoi8R9T1/OLfYA6rDKPI/uENqZpPzLXdgbJNo4bOQBupktlNHRVNriyXKXeseUqzRcBBbSr7PQXwPBwJzzQr7uzgQlqygHuUe54jhLg49pNUCJPfFg12NB2MzL9SppaAnQuO4pvhaf6jjUqGFQytic6Ol3m5PEuJyBtSV01y21C2mQHW/bi/brhhcDqOC0txcuFNMxS1aRMtAk6JbTH2oR4/g0g3Jk75ttrv55vJ1yWzzbvMyjeX17bzfXn09/T7aF7u8HefDdnw9z2Nmur7B6clfj1/invL1TV8kriQ9XfLQfwA=",
      "brillig_names": [
        "_elapse_timelock"
      ]
    },
    {
      "name": "_set_timelock",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "spend_limit",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "withdraw",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "1304127109296130670": {
            "error_kind": "string",
            "string": "Spend limit timelock already exists!"
          },
          "9412426582628826362": {
            "error_kind": "string",
            "string": "Withdraw timelock already exists!"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15624374461980081959": {
            "error_kind": "string",
            "string": "Function _set_timelock can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQBHQCARYBFAS4IgEQAAS4IgEUAAiUAAABZJQAAAFooAgABBIBGJwICBAA7DgACAAEmJQAAAXIeAgADAB4CAAQAMyoAAwAEAAUnAgMBASQCAAUAAACDJQAAAZseAgADAR4CAAQACioDBAUkAgAFAAAAnyUAAAGtJwIDAAIvCgADAAQnAgUAAy8KAAUABhwKBAgEHAoIBwAcCgcEBBwKBggEHAoIBwAcCgcGBC0IAQcAAAECAS0OBActCAEIAAABAgEtDgYIHgIACQUnAgoEACQCAAEAAAEEIwAAASMKKgQKASQCAAEAAAEWJQAAAb8tDgkHLQ4GCCMAAAEjJAIAAgAAATAjAAABUwoqBgoBJAIAAQAAAUIlAAAB0S0LBwEtDgEHLQ4JCCMAAAFTLQsHAS0LCAIcCgEEABwKAgEAMAoABAADMAoAAQAFJigAgAQEeAANAAAAgASAAyQAgAMAAAGaKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQXY1O3KrAH/JzwEAgEmKgEAAQUSGTCyQ42KbjwEAgEmKgEAAQWCn6gblAj8+jwEAgEm",
      "debug_symbols": "tZfdbtswDIXfxde5EEX9UHmVoSjS1C0CGEngJgOGIu8+shXlegCFrcFu7E+ydSyKx5T9PjyPT9fXx8Px5fQ2bH+8D0/zYZoOr4/Tab+7HE5H7n0fnBxKHLZhM4DjVpYzt8ExADKAAFXwqQICgwxC6ZFRQXpIIFWIQaEMW48MKVTITiFWIB7uk0CqULSn1B7vQEF7QB5aBGIF7xSCAlVAVMg8XCDxzegEYoWMClSB/CegY0EEgVIBcgXvFVIFdAp6c0AFGcWTx+gVpIfng0nuKbfbZtAsPV7mcZQkfUkbJ/O8m8fjZdger9O0GX7upuvHTW/n3fHjfNnNfJVnPR6f+cyCL4dpFLptltHOHgoYU6jDOcelNAnwfiUCHRHnvWq44BcJKCsJb0sEKrlKhOJSk6C4UkBbgQLqOlAIpkI3jFI0DJm6FUa8O4z0f8OI1LJBdjaoIxFzVImEYE2i2AolOp1EiRHuDEO8aIXRM7dHaMbksuBsc3esGV3WjDCSGUrXm80WFMFbEv1QpIRoKDHZodxvT7jfn3+flUhmKD0R8JAXe+DytsZ17YPSEwnN5rxVNQnegNZ1qzORTC2YTIjWeviO03OSrfZTIkVnSvh+JEvtCsW0WD8Ut4QSTKP70DOY0xUNhIsE4h8rGnv+cK7ZAxaHYQ7/4I4MizsKWO7w2RbhwqdLmrCT2U4dJU6tviyZvvXeA+KSWMxoRdLViL7VDogxf0sjfVnRVIKlgT2XBtc0gs/m+4a9UopNgxDMjQVD75uHUqsdSDzSsin2bApS8dVitk27wfj28UWe7K+ejkvJtViIv99NCer6Iy1bbXJlJfLArd3+MK9+KG6iNh92T9NYmy/X4/7L1cuvs17RH5LzfNqPz9d5FKXlrwT4+IN32Bwf5A+EGxQ3lB9u8ujf",
      "brillig_names": [
        "_set_timelock"
      ]
    },
    {
      "name": "cancel_timelocks",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "spend_limit",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "withdraw",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9517570785791758743": {
            "error_kind": "string",
            "string": "Unauthorized: not card user!"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "get_note_internal",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "change_spend_limit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "new_spend_limit",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9517570785791758743": {
            "error_kind": "string",
            "string": "Unauthorized: not card user!"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "get_note_internal",
        "notify_created_note_oracle_wrapper",
        "get_random_bytes",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "check_epoch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "asserted_epoch",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "7453358605230733377": {
            "error_kind": "string",
            "string": "Epoch mismatch!"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16586982651309102568": {
            "error_kind": "string",
            "string": "Function check_epoch can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABPKAIAAQSARScCAgQAOw4AAgABKQCAQwUAAVGAJiUAAAC5HgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAeCUAAADiHgIAAgEeAgADAAoqAgMEJAIABAAAAJQlAAAA9B4CAAIGByIAAoBDAAMcCgMCAAoqAgEDJAIAAwAAALglAAABBiYoAIAEBHgADQAAAIAEgAMkAIADAAAA4SoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEF5jDM1vrYleg8BAIBJioBAAEFZ2+mKXBg+EE8BAIBJg==",
      "debug_symbols": "tZXNjqswDIXfJWsWcf6weZVRVdGWjpAQrRi40lXFu197LoGySGY01WzgJKm/+sQWfqhLc5rej21/vX2o6u2hTkPbde37sbud67G99bz7UFoe6FTlCoWkqrJQxCvQhQJtWICIchHgF2E4DpwI2eEgsLKDIvwinI0CVWUkyvOOMSwCsLAiAgvhlBAFiZjnQsU8j+PQNJLmU+Js514PTT+qqp+6rlB/6m76/NHHve4/32M98Cn7aPoLvxl4bbtG1Fxs0Todyk6CW8LBBqIVAcbsIJCBaDH8n6Gd2RBAO4RJIxxSuSAc6bAi0O8INk1AZ+M9oHNJQtYGUbQhqads+JdthN+14XGtBqargRmEL31EBAupJChNIK9jEuQ9vGhDejFlI9fcxsLamMZanW7uTGt6XcaKsMSklWxvrm2BHkwKkbdiw2bFh7SV19sTXu/P71fFY9JKFoK03QeBXSF+/+2DTJMGh/E6gqNkZU0mD0SzVhad/9F1kHtyUuqUky8YfmPgDxlrc/CgM7hjHHhVn9thN1hnoQ1tfeqaZXmd+vPT6fj3Hk/iYL4Pt3NzmYZGSNt0Bn6+WVtYPMgIlgUVDg6z/PU/",
      "brillig_names": [
        "check_epoch"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "operator_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "spend_limit",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_contract_instance_internal",
        "decompose_hint",
        "lte_hint",
        "discover_new_messages",
        "random",
        "notify_created_nullifier_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "notify_created_note_oracle_wrapper",
        "get_random_bytes",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "deposit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9517570785791758743": {
            "error_kind": "string",
            "string": "Unauthorized: not card user!"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "finalize_spend_limit_change",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16667043176865421698": {
            "error_kind": "string",
            "string": "No spend limit change has been scheduled!"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18306039479799369334": {
            "error_kind": "string",
            "string": "Unauthorized: not card user or operator!"
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "get_note_internal",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "get_random_bytes",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "get_config",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::config_note::ConfigNote",
            "fields": [
              {
                "name": "owner",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "token_address",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "operator_address",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "user_address",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "spend_limit",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "randomness",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_config"
      ]
    },
    {
      "name": "get_timelocks_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::timelocked_note::TimelockedNote",
            "fields": [
              {
                "name": "owner",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "proposed_spend_limit",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "proposed_withdraw_amount",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "randomness",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_timelocks_private"
      ]
    },
    {
      "name": "get_timelocks_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::timelock::Timelock",
            "fields": [
              {
                "name": "spend_limit_timelock",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "withdraw_timelock",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "8809271388868081694": {
            "error_kind": "string",
            "string": "Function get_timelocks_public can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABMLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADJiUAAADOHgIAAQAeAgACADMqAAEAAgADJwIBAQEkAgADAAAAdSUAAAD3HgIAAQknAgIAAQoqAQIDJAIAAwAAAJElAAABCScCAQACLwoAAQACJwIBAAMvCgABAAMcCgIEBBwKBAEAHAoBAgQcCgMEBBwKBAEAHAoBAwQtCgIBLQoDAiYoAIAEBHgADQAAAIAEgAMkAIADAAAA9ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEFekDRp5d+eB48BAIBJg==",
      "debug_symbols": "tZXNjqMwDMffJWcOcb7Nq4yqirbpCAnRioGVVhXvvk4Xk+GQSKvRXohjyI/8bcd5iVu8LJ/nfrw/vkT78RKXqR+G/vM8PK7d3D9G8r6ETI8AojWNCE60vhFIM5A0Io3QCJBmM0Cx4cmgFaCSxybDb4Zmj5FsWNEq4oGVbLjNcMAGLVeaDK/YYE9gT2APvj3r2giWcp6nGJOSb9pI8bOb4jiLdlyGoRG/umF5f/T17Mb3OHcTvaX/x/FGIwHv/RCTtTZ5tSwvBW2d2ZaDdog7giJzgEAFIpVihjQqIwAPCFVGmIB+QxiUbkcEeyDoMiEYzXEIxhQJVRmILCNtvSTD/liG+78ybNizEcrZCBWE9ZYRTkNpE1gmoJW8CbQWfigj1WJJRq24VdC7DhWsLxd3pTS91pxTr60uSqnUJoLnykIlVQnxD1LK57R62Kmn7YcdXN6IPTYMqBQoUDvc8+Jzy1ESjgxfCWkAbhg+6HJIKyXqXerjfxHOyiIC60rygTdYzEtdisxSTCghFNSahuSImqAzQutjRJWq1YfcM6sgtw3tzbqeaNpd++lwca4JNvXdZYjb9L6M129v599PfsMX73N6XONtmWIi5dsX6PmhsTHmlK5WmlCJGH9a06//AA==",
      "brillig_names": [
        "get_timelocks_public"
      ]
    },
    {
      "name": "prepare_withdrawal",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9517570785791758743": {
            "error_kind": "string",
            "string": "Unauthorized: not card user!"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "get_note_internal",
        "notify_created_note_oracle_wrapper",
        "get_random_bytes",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AI8W1yJuFXal9hWmY\npXRegNwdhM/LuHBAooL2qAXEK0MvQ1DS5Vgz/uBHCHSJE/1ffbW4cmpdZo7hDVHlNyEK0isohGEo\nP7/pqpu1S+VyX9mmJuqDSGIlOmSdxv2ac5GECQqy433YW3op0FU1vLWyRD0hhNKExkiHHSfiHNb6\n064OdZPF9sTmrkFWscmCs754+kNIzieUQzMCv7MEWDwgdBAiGgvLpHgctVTotfsLCPwuh1knpKwr\nKR/fmwViHsTzCpmm1NAQzDpCeX1tytsQ/0OCCpKCO0hc6uD9KMsCtFsSZ37DTfqdfq1HmmGFiGIR\n+bHZcdjTaEt3/tKaJMxdAwb0Hd6XhXG2zCxLfPcSYb/6JU3SD1fU2985/0Wt0CoyHdX5L/2vhpyY\nBkyemVCe6l4cPlAK7xvfa1jZ4IWjGJYDCDkN5Q3Z8n2MMmozaf0msqJeP8qKGvnpMp1PwDoLIi03\nwX5q7SrCkrUc+S5Y/T/ZOQ3i2camDlvwOiwwOSB1EabVvIpfVK1Cmo0sICvRD9kVavxZhNfishhT\njnOjarMEaHGye2msWK1jh5dtDtpyAx4+e0Dduaitynb2eIOYxRP6JS1ouBxCWcwPan2KmWI9L6u2\nbccdAdMvGAEHoJ1pL0YfR6MPQp/sI6+D/HADiW8ikRS957WYhtFBvN+8nWojjr95FyVJLUgwJxVp\n3EEyW9JlLtNymyo0FuAiwbC43BCAdBfjDuZRy6arQts2HdrV/k7sFfkq3GW4AkQrtMpdIy9u5I/n\nmX2uXeEJ2GfN0tewaSVIB9yBKHBjAWBPkGAvtXsPzENauMGqkfCulNNo4uCRLyjbvzv1Ty1yULWl\nDyywzK8ttpg3Cntpe7SzbZ1Z+GO5C/Am1Skve+urc0NmHnH35qzAdCS92QyGhWzhGREgy64F91vj\noUsKluco9D8XOSdjCjKAtmfOVO18AC/itLBdfTI3KLEjt0FTvAy3dg+iVQVOXrIJp5Iy0HuX1f32\nIN3NlKWEJzIePx4EQpbZL1uTxjnGhwcCjYWaqaAY52/eDZVOgEFds9l96vVpokEJa3skEdKVybwR\n/wSRauGCsRYpvllA3Q+vBToUc+HPiAJypldZyGOdNLoyljSskf0QmA6TvyjLEHNOQ/Rn6oqZIb2p\niQiaM0qLh7lA2ggYbs+LkkRY4aOsLYsxBxxI5voZEji3snD3o/urEQL2JTFMg4EXyc5ggKBXS559\nCmNxGyHrtiNECs+7muE83TE9WiL55ToUnY2Q06SYHzxwPZgdDg/PjwLkJvbW7n62KZ28wKh16+ZK\n0oQ7xUYQTv242igGrFu4QrZ+DGXlF3NcDkShxbCQtDm3xoksrJXLmmiN3SMW2ctgvYu8Z4jfkZt7\nHgJfIUO3KWLzAA5XFvUNnQ3gA1H2jAocDPeyrq+PCDRemrs7Prrj7AwQGhUu4x1s77AhaYgVGjzL\njwa9llu11dm4m5SB5tearMI/1v1ATEOPohC/yWl0hWPHkJ8NskHTxBIg9rmUCtSOhtqqJzgmqEb7\nJXOY7JbMt7dtcjRoyUftNJXCYorYQpMpxdFCyKRx4WEupvmPdInYef75RKDfuv9dqFouNaRF5Jvx\nSAHo3u+AYiRhNuD1ivoCeMjtPs1KS8BeCbQQvEU5Rr+jukjdtY+rGT2yz6xaiT/juOat2WGFRv9H\n0XBLZTIRthkpqxfD4QAZkmB8id0wro9qMl3ydHR2JV7D9SRlGeYj2Fb+smlueymDY7NRS1YdS+gQ\nax+kumhSe9PwZicF2vI8XY9HxgXXD8dKqf8R0UaAJgIOOuuIeXmYvkPWuDdz3ww6TlgX+hMhlgOF\nKpHZ5aM+dlz6E22gcIKdNt6iIXJ5xVvDK+GUYQtaDT7C5fKzBDrVkn917iJOe4uwdsAdnRXmldtJ\nYoR5L0k+SqJepx+Q/5V+KqqeomSYTxXLfqssT2ml2Ailb00MDfwyFqfkTkJc7/GGGfQrfw/rg2SO\nEbH+DYvGtgxvIQt+Bww1reRIgasMq+ppQb4/zeTE4IFhvnl5SCKu+7P2F0xNqsxv6+gtiDGpBETv\nEX32GkvxinRGtU2OzdDlJyENPQ9wXJw7Qm4veGR5CujPFMTyBusHozGX/1z2u6wLrwcDm+cLVXtv\nDU1Z+xKAoZlYPQqQ5tVT5L1kSbWO9QehChGFSw0wrqddreiukl/tbL8F77PitlsEvecaM00v6zMA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACE9XJreFQpWn4vzSWxhcCOV9GGO154vBEt0rcOtwiGGQq0Onu0huzJMDuP+hCPPZVrLLW\nsu9l+l2PKsyis+6uuADENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0T/DBF7F3IrJuupLmeobqEaLN+EOCE3rvz8G891XJ5kBMevpRD\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_message"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "1304127109296130670": {
            "error_kind": "string",
            "string": "Spend limit timelock already exists!"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6534693569755166711": {
            "error_kind": "string",
            "string": "Spend limit timelock not elapsed!"
          },
          "7453358605230733377": {
            "error_kind": "string",
            "string": "Epoch mismatch!"
          },
          "8809271388868081694": {
            "error_kind": "string",
            "string": "Function get_timelocks_public can only be called statically"
          },
          "9412426582628826362": {
            "error_kind": "string",
            "string": "Withdraw timelock already exists!"
          },
          "10970400482459992886": {
            "error_kind": "string",
            "string": "Withdraw timelock not elapsed!"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14268128030637468420": {
            "error_kind": "string",
            "string": "Function _elapse_timelock can only be called internally"
          },
          "15624374461980081959": {
            "error_kind": "string",
            "string": "Function _set_timelock can only be called internally"
          },
          "15628205171772637163": {
            "error_kind": "string",
            "string": "Function _cancel_timelock can only be called internally"
          },
          "16586982651309102568": {
            "error_kind": "string",
            "string": "Function check_epoch can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "spend",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "epoch",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1512526388119113219": {
            "error_kind": "string",
            "string": "Spend limit exceeded!"
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6341284365854103218": {
            "error_kind": "string",
            "string": "Unauthorized: not card operator!"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "check_spend_epoch_initialized",
        "get_note_internal",
        "notify_created_note_oracle_wrapper",
        "check_nullifier_exists",
        "notify_created_nullifier_oracle_wrapper",
        "get_random_bytes",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "withdraw",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "3725644684452373177": {
            "error_kind": "string",
            "string": "Requested withdraw amount exceeds proposed withdraw amount!"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9517570785791758743": {
            "error_kind": "string",
            "string": "Unauthorized: not card user!"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15714459445185061457": {
            "error_kind": "string",
            "string": "No withdrawal has been scheduled!"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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32rPe9rzj/Y8oD0fZ8+L2fNT9jyRPV9jz5vY8xf2PILdn7f71Xb/1u5n2v09u99l93/sfojdH7Dr5Xb92K6n2vVFu95m159yJq41cU8T7fzVzufs/MaeH98nmBnsWE/heY3/V37vsF0u/PwfHMnT7eagrW38/92VJz5yzaINv+O0MUe+Uxr/P/GONR/a9Xs9p3Haqxy01zpopztoFzX+P/OKf1186tOfuYjTrmj8/+bV5Se//7t/XsRpdUcZbnfQli4KlyXroK100FY5aHs4aGsdtH0dtAMctLyDNuKgHeygHeKgHeagHe6gvcRBO9pBO9FBO8lBe4WDdoqDdrqDVnbQag7a6x20jy4Jp33cQfszB+0zDtrnHLS/dNC+7KB9xUH7moP2dQftmw7aPzto/+ag/chB+6mD9u8O2i8ctF86aL9z0J4ZhEJogw3aTXv957L3vuPB9Zz25Wx4vq84aN900L7loH3HQfueg/YTB+1nDtp/OWj/46D90kH7tYPWu1M4rd9BW+CgDTpoOzloyx201Q7a8xy03Ro0adysOWivb9C+cN+XPvv2W8oVTjvbke9cR77zHfkudNAudmBudeS71JHvcke+qxy0axyYdUe+bY58Nzjy3eyg3erAvM2R742OfHc68t3joN3nwLzfke9BR76HHfkec9CecGC+2ZHvaUe+tzryvd1B+0MH5jsd+d7tyPdeR74POGgfcmB+xJHvY458f+zI911Hvu8sD8+304pw2vIV4ZgrHflWOfLt4si3m4O2xoGZc+Tb05FvnSPfPg7aRgfmfo58BzjyHeTIN+KglRyYY458E458BzvyHeqgvdCBeZgj3+GOfEc68h3loB3jwDzOke94R76XOfKd5KC9woF5iiPfqY58r3bke52DdoYDc8qRr+LIV3Pku8OR75GV4fkebdAe+PKfLi+VVt7AaW9u0KS1mfc4ML/YoEm+2187aF9x0P7OQftBgyatzfxPgyatzfyqQfv6d7768gs2X3ECp/26QesJsktO+/NzPsNpD+4cXvY3O2hPN2gnPnXrsY/8csXXOe29DdrH9tz1B7vs/cEip32oQZPq4dMOfv/SoEk6+7aD9n0H7QcO2q8bNKkesqu2/y/Vw8oGTaqHnRs0qR5uXBVe9m84aN910PbePbx8+zho+ztoBzpoYw7ahIN2mIN2hIP2EgftaAft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",
      "debug_symbols": "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njnomYOeOeiZg5456JmDnjm4MgdX5uDKHFyZgytzcGUOrszBlTm4MgdX5uDKHFyZgytzcGUOrszBlTm4MgdX5uDKHFyZgytzcGUOrshBvWEkzARJ0ARL8IR1IHIwoCVk5JGRR0YeGTly0G6wBE9YByIHA1pCTxgJM0ESMvLMyDMjz4wsGVkysmRkyciSkSUjS0aWjCwZWTKyZmTNyJqRNSNrRtaMrBlZM7JmZM3IlpEtI1tGtoxsGdkysmVky8iWkS0je0b2jOwZ2TOyZ2TPyJ6RPSN7RvaMvDLyysgrI6+MvDLynYPWbtAES3hFtnnD2tCuOwkPtaJeNIpmkRRpkRV5UWm00mil0UqjlUYrjVYarTRaabTSaKXRS6OXRi+NXhq9NHpp9NLopdFLo5fGKI1RGqM0RmmM0hilMUpjlMYojVEaszRmaczSmKUxS2OWxiyNWRqzNGZpSGlIaUhpSGlIaUhpSGlIaUhpSGloaWhpaGloaWhpaGloaWhpaGloaVhpWGlYaVhpWGlYaVhpWGlYaVhpeGl4aXhpeGl4aXhpeGl4aXhpeGms0lilsUpjlcYqjVUaqzRWaazSqDxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98jzKhUyDRtEskiItsiIvWkmR55taUWlYaVhpWGlY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",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "decompose_hint",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "get_note_internal",
        "notify_created_note_oracle_wrapper",
        "get_random_bytes",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "ConfigNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "token_address",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "operator_address",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "user_address",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000003"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "spend_limit",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000004"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000005"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000002"
            },
            {
              "kind": "string",
              "value": "SpentAmountEpochNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "spent_amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000003"
            },
            {
              "kind": "string",
              "value": "TimelockedNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "proposed_spend_limit",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "proposed_withdraw_amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000003"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "ContractInstanceDeployer"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "updated_class_ids",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "upgrade_authority",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "asset",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "CardEscrow"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "timelocks",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "timelocks_private",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "spend_epoch",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "spend_limit",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "withdraw",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::_cancel_timelock_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::_cancel_timelock_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "spend_limit",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "withdraw",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::_elapse_timelock_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::_elapse_timelock_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "spend_limit",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "withdraw",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::_set_timelock_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::_set_timelock_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "spend_limit",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "withdraw",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::cancel_timelocks_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::cancel_timelocks_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_spend_limit",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::change_spend_limit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::change_spend_limit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "asserted_epoch",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::check_epoch_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::check_epoch_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "operator_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "spend_limit",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::deposit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::deposit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CardEscrow::finalize_spend_limit_change_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::finalize_spend_limit_change_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CardEscrow::get_config_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "operator_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "user_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "spend_limit",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "randomness",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::config_note::ConfigNote"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::get_config_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CardEscrow::get_timelocks_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "proposed_spend_limit",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "proposed_withdraw_amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "randomness",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::timelocked_note::TimelockedNote"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::get_timelocks_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CardEscrow::get_timelocks_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "spend_limit_timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "withdraw_timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::timelock::Timelock"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::get_timelocks_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::prepare_withdrawal_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::prepare_withdrawal_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "epoch",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::spend_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::spend_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "CardEscrow::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "CardEscrow::withdraw_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "CardEscrow::withdraw_abi"
        }
      ]
    }
  },
  "file_map": {
    "107": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "108": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "109": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "114": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    },
    "115": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "118": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n    size_in_fields,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "119": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "122": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "124": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ, _) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "125": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "127": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "128": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "129": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "130": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "131": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "132": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "133": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "134": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "141": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n        offchain_messages::emit_offchain_message,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n    utils::{array::subarray::subarray, remove_constraints::remove_constraints},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash,\n    address::AztecAddress,\n    constants::{PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_SIZE_IN_FIELDS},\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        // Regardless of the original note size `N, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log = unsafe {\n            remove_constraints(|| compute_note_log(note, storage_slot, recipient, sender))\n        };\n        // Regardless of the original note size `N`, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note_unconstrained`, except the note is emitted as an offchain message instead of a\n/// private log.\n///\n/// Like `encode_and_encrypt_note_unconstrained`, this function uses unconstrained encryption. The sender can set any\n/// message contents, potentially preventing recipient decryption and resulting in note loss. Since offchain messages\n/// inherently lack delivery guarantees, constrained encryption provides no benefit and is not offered.\n///\n/// While delivery is not guaranteed, message integrity is still protected via cryptographic commitments in the note\n/// hash tree. For guaranteed delivery, use `encode_and_encrypt_note` with private logs instead. See\n/// `messages::offchain_message::emit_offchain_message` for more details on delivery guarantees.\npub fn encode_and_encrypt_note_and_emit_as_offchain_message<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log = unsafe {\n            remove_constraints(|| compute_note_log(note, storage_slot, recipient, sender))\n        };\n\n        // Remove the tag from the log\n        // TODO: This is a tech debt. We should refactor this file such that the log is by default computed without\n        // the tag.\n        let message_ciphertext: [_; PRIVATE_LOG_CIPHERTEXT_LEN] = subarray(encrypted_log, 1);\n\n        emit_offchain_message(message_ciphertext, recipient);\n    }\n}\n"
    },
    "142": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "150": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "155": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "157": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{\n        note_getter_options::{\n            NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder,\n        },\n        note_interface::{NoteHash, NoteType},\n        note_viewer_options::NoteViewerOptions,\n        retrieved_note::RetrievedNote,\n        utils::compute_note_hash_for_read_request,\n    },\n    oracle,\n    utils::{array, comparison::compare},\n};\n\nuse protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::{Packable, ToField}};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. note nonce, note hash,\n/// etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "163": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "165": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/note/retrieved_note.nr",
      "source": "use crate::{note::note_metadata::NoteMetadata, utils::array::subarray::subarray};\nuse protocol_types::{\n    address::AztecAddress,\n    traits::{FromField, Packable, Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\n// Number of fields a RetrievedNote adds to the packed or serialized representation of a note\n// +1 for the contract address\n// +2 for the note metadata\npub global RETRIEVED_NOTE_OVERHEAD: u32 = 1 + 2;\n\n/// A container of a note and the metadata required to prove its existence, regardless of whether the note is\n/// pending (created in the current transaction) or settled (created in a previous transaction).\n#[derive(Eq)]\npub struct RetrievedNote<NOTE> {\n    pub note: NOTE,\n    pub contract_address: AztecAddress,\n    pub metadata: NoteMetadata,\n}\n\nimpl<NOTE, let N: u32> Serialize<N + RETRIEVED_NOTE_OVERHEAD> for RetrievedNote<NOTE>\nwhere\n    NOTE: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + RETRIEVED_NOTE_OVERHEAD] {\n        array_concat(\n            array_concat(self.note.serialize(), [self.contract_address.to_field()]),\n            self.metadata.serialize(),\n        )\n    }\n}\n\n// This function is not part of the Packable trait implementation because in the case of the retrieved note, the pack\n// functionality resides in TS (oracle.ts and txe_service.ts).\npub fn unpack_retrieved_note<NOTE, let N: u32>(\n    packed_retrieved_note: [Field; N + RETRIEVED_NOTE_OVERHEAD],\n) -> RetrievedNote<NOTE>\nwhere\n    NOTE: Packable<N>,\n{\n    let contract_address = AztecAddress::from_field(packed_retrieved_note[0]);\n    let note_nonce = packed_retrieved_note[1];\n    let nonzero_note_hash_counter = (packed_retrieved_note[2] as u1) != 0;\n\n    let packed_note = subarray(packed_retrieved_note, RETRIEVED_NOTE_OVERHEAD);\n    let note = NOTE::unpack(packed_note);\n\n    RetrievedNote {\n        note,\n        contract_address,\n        metadata: NoteMetadata::from_raw_data(nonzero_note_hash_counter, note_nonce),\n    }\n}\n"
    },
    "166": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "171": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "172": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "173": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "174": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "175": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "180": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "181": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "183": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "185": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, note nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "187": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "188": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "192": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "196": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr",
      "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nmod test;\n\n// Private storage slots are not really 'slots' but rather a value in the note hash preimage, so there is no notion of a\n// value spilling over multiple slots. For this reason PrivateMutable (and all other private state variables) needs just\n// one slot to be reserved, regardless of what it stores.\nimpl<T, Context> Storage<1> for PrivateMutable<T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateMutable<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash,\n{\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<let N: u32>(self, new_note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        let (prev_retrieved_note, note_hash_for_read_request): (RetrievedNote<Note>, Field) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(\n            self.context,\n            prev_retrieved_note,\n            note_hash_for_read_request,\n        );\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        // Safety: `check_nullifier_exists` is an unconstrained function - we can constrain a true value\n        // by providing an inclusion proof of the nullifier, but cannot constrain a false value since\n        // a non-inclusion proof would only be valid if done in public.\n        // Ultimately, this is not an issue given that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able\n        //    to produce an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious\n        // oracle (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce\n        // a proof.\n        let is_initialized =\n            unsafe { check_nullifier_exists(self.compute_initialization_nullifier()) };\n\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        let mut (retrieved_note, note_hash_for_read_request) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, retrieved_note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, retrieved_note.note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateMutable<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: Packable<N>,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"
    },
    "201": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "215": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "216": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "218": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "219": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "221": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "222": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "224": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "226": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "227": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "238": {
      "path": "/home/jpag/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "299": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "302": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "304": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "309": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"
    },
    "316": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "317": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "318": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "331": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "333": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "334": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "344": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "355": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "369": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "374": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "375": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "393": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "394": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO: This currently only exists to aid point compression in compress_to_blob_commitment().\n// Once compression is part of BigCurve it can either be removed or optimised to be used elsewhere.\npub fn byte_to_bits_be(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[7 - i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "396": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "406": {
      "path": "/home/jpag/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "457": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        array_concat(note_completion_log, padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/home/jpag/Workground/aztec/fde/aztec-card/packages/contracts/src/main.nr",
      "source": "use aztec::macros::aztec;\n\npub mod types;\npub mod test;\n\n#[aztec]\npub contract CardEscrow {\n    use aztec::{\n        context::PrivateContext,\n        macros::{\n            functions::{initializer, private, public, internal, utility, view},\n            storage::storage\n        },\n        oracle::notes::check_nullifier_exists,\n        prelude::{\n            AztecAddress,\n            PublicMutable,\n            PrivateMutable,\n            Map\n        },\n        protocol_types::{\n            storage::map::derive_storage_slot_in_map,\n            constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n            hash::poseidon2_hash_with_separator\n        },\n        messages::logs::note::encode_and_encrypt_note,\n    };\n    use token_contract::Token;\n    use crate::types::{\n        config_note::ConfigNote,\n        timelock::Timelock,\n        timelocked_note::TimelockedNote,\n        spent_amount_epoch_note::SpentAmountEpochNote,\n    };\n\n    pub global TIMELOCK_BLOCKS: u32 = 30; // number of blocks that must elapse for a timelock\n    pub global EPOCH_LENGTH: u64 = 86400; // seconds in a day\n\n    #[storage]\n    struct Storage<Context> {\n        config: PrivateMutable<ConfigNote, Context>,\n        timelocks: PublicMutable<Timelock, Context>,\n        timelocks_private: PrivateMutable<TimelockedNote, Context>,\n        spend_epoch: Map<Field, PrivateMutable<SpentAmountEpochNote, Context>, Context>,\n    }\n\n    ////////////////////////////////\n    ////////// CONSTRUCTOR /////////\n    ////////////////////////////////\n    \n    #[private]\n    #[initializer]\n    fn constructor(\n        token_address: AztecAddress,\n        operator_address: AztecAddress,\n        spend_limit: u128\n    ) {\n        let self_address = context.this_address();\n        let caller = context.msg_sender();\n\n        // Create config note\n        let config = ConfigNote::new(\n            self_address,\n            token_address,\n            operator_address,\n            caller,\n            spend_limit\n        );\n        storage.config.initialize(config).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n        // initialize the timelock note\n        let timelocked_note = TimelockedNote::new(self_address, 0, 0);\n        storage.timelocks_private.initialize(timelocked_note).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n    }\n    \n    ////////////////////////////\n    ////////// PRIVATE /////////\n    ////////////////////////////\n\n    #[private]\n    fn deposit(amount: u128, _nonce: Field) {\n        let self_address = context.this_address();\n        let caller = context.msg_sender();\n\n        // authorize this call\n        let config = get_config_and_reemit(&mut context, storage.config);\n        assert(config.user_address == caller, \"Unauthorized: not card user!\");\n\n        // transfer tokens in\n        Token::at(config.token_address)\n            .transfer_private_to_private(\n                caller,\n                self_address,\n                amount,\n                _nonce\n            )\n            .call(&mut context);\n    }\n\n    #[private]\n    fn prepare_withdrawal(amount: u128) {\n        let caller = context.msg_sender();\n        let self_address = context.this_address();\n\n        // authorize this call\n        let config = get_config_and_reemit(&mut context, storage.config);\n        assert(config.user_address == caller, \"Unauthorized: not card user!\");\n\n        // update the timelocked note\n        let mut timelocked_note = storage.timelocks_private.get_note().note;\n        timelocked_note.proposed_withdraw_amount = amount;\n        storage.timelocks_private.replace(timelocked_note).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n        // publicly enqueue the timelock\n        CardEscrow::at(self_address)\n            ._set_timelock(false, true)\n            .enqueue(&mut context);\n    }\n\n    #[private]\n    fn withdraw(amount: u128) {\n        let caller = context.msg_sender();\n        let self_address = context.this_address();\n\n        // authorize this call\n        let config = get_config_and_reemit(&mut context, storage.config);\n        assert(config.user_address == caller, \"Unauthorized: not card user!\");\n\n        // get the amount to transfer from the timelocked note\n        let mut timelocked_note = storage.timelocks_private.get_note().note;\n        let mut amount_to_withdraw = timelocked_note.proposed_withdraw_amount;\n\n        // check there is a pending withdrawal\n        // NOTE: should we remove this? all you can do is withdraw 0...\n        assert(amount_to_withdraw != 0, \"No withdrawal has been scheduled!\");\n\n        // handle withdrawing less than timelocked amount\n        if amount > 0 {\n            assert(\n                amount <= amount_to_withdraw,\n                \"Requested withdraw amount exceeds proposed withdraw amount!\"\n            );\n            amount_to_withdraw = amount;\n        }\n\n        // reset the timelock note\n        timelocked_note.proposed_withdraw_amount = 0;\n        storage.timelocks_private.replace(timelocked_note).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n        // transfer the tokens out\n        Token::at(config.token_address)\n            .transfer_private_to_private(\n                self_address,\n                caller,\n                amount_to_withdraw,\n                0\n            )\n            .call(&mut context);\n\n        // enqueue public check that timelock is elapsed\n        CardEscrow::at(self_address)\n            ._elapse_timelock(false, true)\n            .enqueue(&mut context);\n    }\n\n\n    #[private]\n    fn spend(amount: u128, epoch: Field) {\n        let caller = context.msg_sender();\n        let self_address = context.this_address();\n\n        // authorize this call\n        let config = get_config_and_reemit(&mut context, storage.config);\n        assert(config.operator_address == caller, \"Unauthorized: not card operator!\");\n        \n        // check epoch note has been initialized and create/ update it\n        let is_initialized = unsafe { check_spend_epoch_initialized(epoch) };\n        let mut spend_amount_epoch_note = SpentAmountEpochNote::new(\n            context.this_address(),\n            amount,\n        );\n        if is_initialized {\n            let existing_note = storage.spend_epoch.at(epoch).get_note().note;\n            spend_amount_epoch_note.spent_amount += existing_note.spent_amount;\n        }\n\n        // check the spend amount against the limit\n        assert(\n            config.spend_limit >= spend_amount_epoch_note.spent_amount,\n            \"Spend limit exceeded!\"\n        );\n\n        // store the note\n        storage\n            .spend_epoch\n            .at(epoch)\n            .initialize_or_replace(spend_amount_epoch_note)\n            .emit(encode_and_encrypt_note(\n                &mut context,\n                context.this_address(),\n                context.this_address()\n            ));\n\n        // transfer the tokens out\n        Token::at(config.token_address)\n            .transfer_private_to_private(\n                self_address,\n                caller,\n                amount,\n                0\n            )\n            .call(&mut context);\n        // enqueue a check to make sure the asserted epoch is correct\n        CardEscrow::at(self_address)\n            .check_epoch(epoch)\n            .enqueue(&mut context);\n    }\n\n    // todo: we should make this a delayed public mutable so that we can change it in one tx?\n\n    #[private]\n    fn change_spend_limit(new_spend_limit: u128) {\n        let caller = context.msg_sender();\n        let self_address = context.this_address();\n\n        // authorize this call\n        let config = get_config_and_reemit(&mut context, storage.config);\n        assert(config.user_address == caller, \"Unauthorized: not card user!\");\n\n        // update the timelocked note\n        let mut timelocked_note = storage.timelocks_private.get_note().note;\n        timelocked_note.proposed_spend_limit = new_spend_limit;\n        storage.timelocks_private.replace(timelocked_note).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n        // publicly enqueue the timelock\n        CardEscrow::at(self_address)\n            ._set_timelock(true, false)\n            .enqueue(&mut context);\n    }\n\n    #[private]\n    fn finalize_spend_limit_change() {\n        let caller = context.msg_sender();\n        let self_address = context.this_address();\n\n        // authorize this call\n        // DO NOT USE `get_config_and_reemit` UTILITY HERE SINCE WE MUTATE IT\n        let mut config = storage.config.get_note().note;\n        assert(\n            (config.user_address == caller)\n            | (config.operator_address == caller),\n            \"Unauthorized: not card user or operator!\"\n        );\n\n        // check that a spend limit change has been scheduled\n        let mut timelocked_note = storage.timelocks_private.get_note().note;\n        let proposed_spend_limit = timelocked_note.proposed_spend_limit;\n        assert(proposed_spend_limit != 0, \"No spend limit change has been scheduled!\");\n\n        // update the spend limit\n        config.spend_limit = timelocked_note.proposed_spend_limit;\n        storage.config.replace(config).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n        // reset the timelock note\n        timelocked_note.proposed_spend_limit = 0;\n        storage.timelocks_private.replace(timelocked_note).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n        // enqueue public check that timelock is elapsed\n        CardEscrow::at(self_address)\n            ._elapse_timelock(true, false)\n            .enqueue(&mut context);\n    }\n\n    #[private]\n    fn cancel_timelocks(spend_limit: bool, withdraw: bool) {\n        let caller = context.msg_sender();\n        let self_address = context.this_address();\n\n        // authorize this call\n        let mut config = storage.config.get_note().note;\n        assert(config.user_address == caller, \"Unauthorized: not card user!\");\n\n        // reset the timelock note\n        let mut timelocked_note = storage.timelocks_private.get_note().note;\n        if spend_limit {\n            timelocked_note.proposed_spend_limit = 0;\n        }\n        if withdraw {\n            timelocked_note.proposed_withdraw_amount = 0;\n        }\n        storage.timelocks_private.replace(timelocked_note).emit(encode_and_encrypt_note(\n            &mut context,\n            self_address,\n            self_address\n        ));\n\n        // reset the public timelock\n        CardEscrow::at(self_address)\n            ._cancel_timelock(spend_limit, withdraw)\n            .enqueue(&mut context);\n    }\n\n    ////////////////////////////\n    ////////// PUBLIC //////////\n    ////////////////////////////\n\n    #[public]\n    #[internal]\n    fn _set_timelock(spend_limit: bool, withdraw: bool) {\n        let mut timelock = storage.timelocks.read();\n        let current_block = context.block_number();\n        if spend_limit {\n            assert(timelock.spend_limit_timelock == 0, \"Spend limit timelock already exists!\");\n            timelock.spend_limit_timelock = current_block;\n        }\n        if withdraw {\n            assert(timelock.withdraw_timelock == 0, \"Withdraw timelock already exists!\");\n            timelock.withdraw_timelock = current_block;\n        }\n        storage.timelocks.write(timelock);\n    }\n\n    #[public]\n    #[internal]\n    fn _elapse_timelock(spend_limit: bool, withdraw: bool) {\n        let mut timelock = storage.timelocks.read();\n        let current_block = context.block_number();\n        if spend_limit {\n            assert(\n                timelock.spend_limit_timelock + TIMELOCK_BLOCKS <= current_block,\n                \"Spend limit timelock not elapsed!\"\n            );\n            timelock.withdraw_timelock = 0;\n        }\n        if withdraw {\n            assert(\n                timelock.withdraw_timelock + TIMELOCK_BLOCKS <= current_block,\n                \"Withdraw timelock not elapsed!\"\n            );\n            timelock.withdraw_timelock = 0;\n        }\n        storage.timelocks.write(timelock);\n    }\n\n    #[public]\n    #[internal]\n    fn _cancel_timelock(spend_limit: bool, withdraw: bool) {\n        let mut timelock = storage.timelocks.read();\n        if spend_limit {\n            timelock.spend_limit_timelock = 0;\n        }\n        if withdraw {\n            timelock.withdraw_timelock = 0;\n        }\n        storage.timelocks.write(timelock);\n    }\n\n    #[public]\n    #[internal]\n    fn check_epoch(asserted_epoch: Field) {\n        let timestamp = context.timestamp();\n        let current_epoch = (timestamp / EPOCH_LENGTH) as Field;\n        assert(current_epoch == asserted_epoch, \"Epoch mismatch!\");\n    }\n    \n\n    #[public]\n    #[view]\n    fn get_timelocks_public() -> Timelock {\n        storage.timelocks.read()\n    }\n\n    ////////////////////////////\n    ///////// UTILITY //////////\n    ////////////////////////////\n\n    #[contract_library_method]\n    fn get_config_and_reemit(\n        context: &mut PrivateContext,\n        config_storage: PrivateMutable<ConfigNote, &mut PrivateContext>\n    ) -> ConfigNote {\n        let self_address = context.this_address();\n        let config_emission = config_storage.get_note();\n        config_emission.emit(encode_and_encrypt_note(\n            context,\n            self_address,\n            self_address\n        ));\n        config_emission.note\n    }\n\n    #[contract_library_method]\n    unconstrained fn check_spend_epoch_initialized(\n        epoch: Field\n    ) -> bool {\n        // get the slot the spent amount epoch note would be stored at\n        let map_slot = CardEscrow::storage_layout().spend_epoch.slot;\n        let epoch_slot = derive_storage_slot_in_map(map_slot, epoch);\n        // compute the initialization nullifier\n        let nullifier = poseidon2_hash_with_separator(\n            [epoch_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        );\n        // check with oracle call if it exists and return\n        unsafe { check_nullifier_exists(nullifier) }\n    }\n\n    #[utility]\n    pub unconstrained fn get_config() -> ConfigNote {\n        storage.config.view_note()\n    }\n\n    #[utility]\n    pub unconstrained fn get_timelocks_private() -> TimelockedNote {\n        storage.timelocks_private.view_note()\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "62": {
      "path": "/home/jpag/Workground/aztec/fde/aztec-card/packages/contracts/src/types/config_note.nr",
      "source": "use aztec::{\n    macros::notes::note,\n    oracle::random::random,\n    prelude::AztecAddress,\n    protocol_types::traits::{Deserialize, Serialize},\n};\n\n#[note]\n#[derive(Eq, Serialize, Deserialize)]\npub struct ConfigNote {\n    owner: AztecAddress,\n    token_address: AztecAddress,\n    operator_address: AztecAddress,\n    user_address: AztecAddress,\n    spend_limit: u128,\n    randomness: Field,\n}\n\nimpl ConfigNote {\n    pub fn new(\n        owner: AztecAddress,\n        token_address: AztecAddress,\n        operator_address: AztecAddress,\n        user_address: AztecAddress,\n        spend_limit: u128,\n    ) -> Self {\n        ConfigNote {\n            owner,\n            token_address,\n            operator_address,\n            user_address,\n            spend_limit,\n            randomness: unsafe { random() },\n        }\n    }\n}\n"
    },
    "63": {
      "path": "/home/jpag/Workground/aztec/fde/aztec-card/packages/contracts/src/types/spent_amount_epoch_note.nr",
      "source": "use aztec::{\n    macros::notes::note,\n    oracle::random::random,\n    prelude::AztecAddress,\n    protocol_types::traits::{Deserialize, Serialize},\n};\n\n#[note]\n#[derive(Eq, Serialize, Deserialize)]\npub struct SpentAmountEpochNote {\n    owner: AztecAddress,\n    spent_amount: u128,\n    randomness: Field,\n}\n\nimpl SpentAmountEpochNote {\n    pub fn new(\n        owner: AztecAddress,\n        spent_amount: u128\n    ) -> Self {\n        SpentAmountEpochNote {\n            owner,\n            spent_amount,\n            randomness: unsafe { random() },\n        }\n    }\n\n    // pub fn nullifier(owner: Field, blinding: Field, epoch: Field) -> Field {\n    //     Poseidon2::hash([\n    //         owner,\n    //         blinding,\n    //         epoch\n    //     ])\n    // }\n}\n"
    },
    "65": {
      "path": "/home/jpag/Workground/aztec/fde/aztec-card/packages/contracts/src/types/timelocked_note.nr",
      "source": "use aztec::{\n    macros::notes::note,\n    oracle::random::random,\n    prelude::AztecAddress,\n    protocol_types::traits::{Deserialize, Serialize},\n};\n\n#[note]\n#[derive(Eq, Serialize, Deserialize)]\npub struct TimelockedNote {\n    owner: AztecAddress,\n    proposed_spend_limit: u128,\n    proposed_withdraw_amount: u128,\n    randomness: Field,\n}\n\nimpl TimelockedNote {\n    pub fn new(\n        owner: AztecAddress,\n        proposed_spend_limit: u128,\n        proposed_withdraw_amount: u128,\n    ) -> Self {\n        TimelockedNote {\n            owner,\n            proposed_spend_limit,\n            proposed_withdraw_amount,\n            randomness: unsafe { random() },\n        }\n    }\n}"
    },
    "76": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "77": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n"
    },
    "84": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "85": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "86": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n\n    pub fn get_preimage_and_assert_empty<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n        assert_eq(self.hash, 0);\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "87": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "90": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "92": {
      "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/v1.2.1/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
